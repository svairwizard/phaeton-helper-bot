import os
from datetime import datetime, timedelta
import requests
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import logging

# —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = '–≤–∞—à_—Ç–≥_—Ç–æ–∫–µ–Ω'
ALPHAVANTAGE_API_KEY = '–≤–∞—à_—Ç–æ–∫–µ–Ω_–∞–ª—å—Ñ—ã'

# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def get_weather() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ —á–µ—Ä–µ–∑ Open-Meteo API"""
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        'latitude': 55.7558,
        'longitude': 37.6176,
        'hourly': 'temperature_2m,precipitation_probability',
        'forecast_days': 1,
        'timezone': 'Europe/Moscow'
    }
    
    try:
        response = requests.get(url, params=params)
        data = response.json()
        
        hourly = data['hourly']
        times = hourly['time']
        temps = hourly['temperature_2m']
        precip = hourly['precipitation_probability']
        
        temp = temps[7]
        prob = precip[7]
        
        return f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã\nüìç–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ:\n üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n ‚òîÔ∏è–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {prob}%"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"

def get_usd_rate() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –æ—Ç –¶–ë –†–§"""
    today = datetime.now().strftime('%d/%m/%Y')
    yesterday = (datetime.now() - timedelta(days=2)).strftime('%d/%m/%Y')
    
    try:
        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫—É—Ä—Å
        today_url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={today}"
        response = requests.get(today_url)
        today_rate = parse_usd_rate(response.text)
        
        # –í—á–µ—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å
        yesterday_url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={yesterday}"
        response = requests.get(yesterday_url)
        yesterday_rate = parse_usd_rate(response.text)
        
        change = today_rate - yesterday_rate
        trend = "‚Üë" if change >= 0 else "‚Üì"
        
        return (f"üí≤–ö—É—Ä—Å USD –¶–ë –†–§:\n"
                f"–°–µ–≥–æ–¥–Ω—è: {today_rate:.2f} —Ä—É–±.\n"
                f"–í—á–µ—Ä–∞: {yesterday_rate:.2f} —Ä—É–±.\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend} {abs(change):.2f} —Ä—É–±.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD"

def parse_usd_rate(xml_data: str) -> float:
    """–ü–∞—Ä—Å–∏—Ç XML –æ—Ç –¶–ë –†–§ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD"""
    from xml.etree import ElementTree
    
    root = ElementTree.fromstring(xml_data)
    for valute in root.findall('Valute'):
        if valute.find('CharCode').text == 'USD':
            return float(valute.find('Value').text.replace(',', '.'))
    return 0.0

def get_brent_oil() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –Ω–µ—Ñ—Ç–∏ Brent —á–µ—Ä–µ–∑ Alpha Vantage API"""
    try:
        url = "https://www.alphavantage.co/query"
        params = {
            'function': 'BRENT',
            'interval': 'daily',
            'apikey': ALPHAVANTAGE_API_KEY
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–∞–ø–∏—Å–∏ (—Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
        last_two = data['data'][:2]
        today = last_two[0]
        yesterday = last_two[1]
        
        change = float(today['value']) - float(yesterday['value'])
        trend = "‚Üë" if change >= 0 else "‚Üì"
        
        return (f"üõ¢ –¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏ Brent:\n"
                f"–°–µ–≥–æ–¥–Ω—è: {today['value']} USD/–±–∞—Ä—Ä–µ–ª—å\n"
                f"–í—á–µ—Ä–∞: {yesterday['value']} USD/–±–∞—Ä—Ä–µ–ª—å\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend} {abs(change):.2f} USD")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –Ω–µ—Ñ—Ç—å Brent"

def send_daily_update(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 7 —É—Ç—Ä–∞"""
    chat_id = context.job.context
    message = format_message()
    context.bot.send_message(chat_id=chat_id, text=message)

def format_message() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    weather = get_weather()
    usd = get_usd_rate()
    oil = get_brent_oil()
    
    return f"{weather}\n\n{usd}\n\n{oil}"

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –§–∞—ç—Ç–æ–Ω!\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π /now –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

def now(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /now"""
    message = format_message()
    update.message.reply_text(message)

def setup_job_queue(update: Update, context: CallbackContext) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 7 —É—Ç—Ä–∞"""
    chat_id = update.message.chat_id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    context.job_queue.run_daily(
        send_daily_update,
        time=datetime.strptime('07:00', '%H:%M').time(),
        days=(0, 1, 2, 3, 4, 5, 6),
        context=chat_id,
        name=str(chat_id)
    )
    
    update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ 7:00 —É—Ç—Ä–∞!")

def error_handler(update: Update, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:", exc_info=context.error)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("now", now))
    dp.add_handler(CommandHandler("setup", setup_job_queue))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.idle()

if __name__ == '__main__':
    main()
